Just follow the hint. Use or_matcher as to select different rules under one nonterminal. When the fragment matches, it returns some construct with derivation and the rest of the fragment; otherwise, it checks next rule under the same nonterminal. So the matcher returns the first acceptable match of a prefix of fragment. And use appended_matcher as to test whether a specific rule is matchable with the fragment. When the rule is empty, it returns the acceptor d frag; when it meets a nonterminal, it goes back to the or_matcher for the nonterminal and the corresponding acceptor is constructed by the append_matcher function, which also follows the idea of append_matchers function in the hint. And since make_appended_matchers and make_or_matchers call each other, so use let rec…and…and…to define mutually recursive functions.

The code can successfully run all the sample test cases.

There are some possible weaknesses in this implementation and certain types of grammars cannot be handled. Say if Expr -> [N Expr; N Term], the code would go into infinite loop.

let test3 = 
  ((parse_prefix awkish_grammar accept_all ["("; "A"; "$"; "S"; "("; "4"; "9"; ")"; "$"; "0"; "-"; "D"; "$"; "("; "7"; "2"; ")"; "++"; "$"; "("; "6"; "B"; "7"; ")"; "--"; "6"; "-"; "5"; "6"; "("; "0"; "6"; ")"]) = None)

let test4 = 
  ((parse_prefix awkish_grammar accept_all ["("; "("; "A"; "$"; "D"; "3"; "9"; "+"; "C"; "$"; "7"; ")"; "("; "8"; "K"; "$"; "5"; ")"; ")"]) 
  = Some
 ([(Expr, [N Term]); (Term, [T "("; N Term; N Term; T ")"]);
   (Term, [T "("; N Term; N Expr; T ")"]); (Term, [N Char; N Lvalue]);
   (Char, [T "A"]); (Lvalue, [T "$"; N Expr]); (Expr, [N Char; N Expr]);
   (Char, [T "D"]); (Expr, [N Term]); (Term, [N Num]); (Num, [T "3"]);
   (Expr, [N Term; N Binop; N Expr]); (Term, [N Num]); (Num, [T "9"]);
   (Binop, [T "+"]); (Expr, [N Term]); (Term, [N Char; N Lvalue]);
   (Char, [T "C"]); (Lvalue, [T "$"; N Expr]); (Expr, [N Term]);
   (Term, [N Num]); (Num, [T "7"]); (Term, [T "("; N Term; N Term; T ")"]);
   (Term, [N Num]); (Num, [T "8"]); (Term, [N Char; N Lvalue]);
   (Char, [T "K"]); (Lvalue, [T "$"; N Expr]); (Expr, [N Term]);
   (Term, [N Num]); (Num, [T "5"])],
  []))
(parse_prefix awkish_grammar accept_all ["("; "("; "A"; "$"; "D"; "3"; "9"; "+"; "C"; "$"; "7"; ")"; "("; "8"; "K"; "$"; "5"; ")"; ")"]);;
